AWSTemplateFormatVersion: 2010-09-09
Description:
  Deploy Amazon Q For Business Application.
Parameters:
  S3DataSourceBucket:
    Description: The name of the bucket that contains the data for the data source
    Type: String
  CreateIDC:
    Description: IAM Identity center is prerequisite to configure Q Business. Provide IAM Identity Instance ARN  
    Type: String
  QBusinessApplicationName:
    Description: The name of the Q Business Application
    Type: String
  IDCUserName:
    Description: The name of the Q Business Application
    Type: String 
  IDCEmail:
    Description: The name of the Q Business Application
    Type: String 
  IDCDisplayName:
    Description: The name of the Q Business Application
    Type: String  
  IDCFirstName:
    Description: The name of the Q Business Application
    Type: String  
  IDCLastName:
    Description: The name of the Q Business Application
    Type: String                    

Conditions:
  IfCreateIDC: !Equals 
    - !Ref CreateIDC
    - "yes"

Resources:
  IDCLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: IfCreateIDC
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSOAdminPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sso:CreateInstance
                  - sso:DescribeInstance
                  - sso:ListInstances
                  - iam:CreateServiceLinkedRole
                  - identitystore:CreateGroup
                  - identitystore:CreateGroupMembership
                  - identitystore:CreateUser
                Resource:
                  - '*'

  IDCLambda:
    Type: AWS::Lambda::Function
    Condition: IfCreateIDC
    Properties:
      Handler: index.handler
      Runtime: python3.10
      Timeout: 300
      Description: Create IDC Local Instance
      Role: !GetAtt IDCLambdaExecutionRole.Arn
      Environment:
        Variables:
          user_name: !Ref IDCUserName
          email: !Ref IDCEmail
          display_name: !Ref IDCDisplayName
          given_name: !Ref IDCFirstName
          last_name: !Ref IDCLastName          

      Code:
        ZipFile: |
          import os
          import json
          import time
          import boto3
          import cfnresponse

          sso_client = boto3.client('sso-admin')
          id_store_client = boto3.client('identitystore')

          GROUPS = ["QUsers"]
          USERS = [
              {
                  "user_name": os.environ['user_name'],
                  "email": os.environ['email'],
                  "display_name": os.environ['display_name'],
                  "given_name": os.environ['given_name'],
                  "last_name": os.environ['last_name'],
                  "groups": ["QUsers"]  
              }
          ]

          def handler(event, context):
              try:
                  print('Received event: ' + json.dumps(event, indent=4, default=str))
                  if event['RequestType'] == 'Create':
                      print("Check for existing IDC Instance")
                      list_inst_response = sso_client.list_instances()
                      if list_inst_response["Instances"]:
                          print("IDC Instance exists. Skipping creation")
                          instance_arn = list_inst_response["Instances"][0]['InstanceArn']
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {'InstanceArn': instance_arn}, instance_arn)
                          return
                      print("Creating IDC Instance")
                      create_response = sso_client.create_instance()
                      instance_arn = create_response['InstanceArn']
                      identity_store_id = None
                      for idx in range(10):
                          instance_dsec = sso_client.describe_instance(InstanceArn=instance_arn)
                          print("IDC Instance:" + json.dumps(instance_dsec, indent=4, default=str))
                          if instance_dsec['Status'] != "ACTIVE":
                              time.sleep(10)
                          else:
                              identity_store_id = instance_dsec['IdentityStoreId']
                              break
                      if identity_store_id:
                          group_idx = {}
                          for group in GROUPS:
                              resp = id_store_client.create_group(
                                  IdentityStoreId=identity_store_id,
                                  DisplayName=group,
                                  Description=group
                              )
                              print("Group Creation:" + json.dumps(resp, indent=4, default=str))
                              group_idx[group] = resp["GroupId"]
                          for user in USERS:
                              user_resp = id_store_client.create_user(
                                  IdentityStoreId=identity_store_id,
                                  UserName=user["user_name"],
                                  DisplayName=user["display_name"],
                                  Emails=[{"Value": user["email"], "Type": "Work", "Primary": True}],
                                  Name={"GivenName": user["given_name"], "FamilyName": user["last_name"]}
                              )
                              print("User Creation:" + json.dumps(user_resp, indent=4, default=str))
                              # Assign groups
                              for grp in user["groups"]:
                                  if grp in group_idx:
                                      member_resp = id_store_client.create_group_membership(
                                          IdentityStoreId=identity_store_id,
                                          GroupId=group_idx[grp],
                                          MemberId={"UserId": user_resp["UserId"]}
                                      )
                                      print("Group Member Creation:" + json.dumps(member_resp, indent=4, default=str))
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {'InstanceArn': instance_arn}, instance_arn)
                  # elif event['RequestType'] == 'Delete':
                  #     sso_client.delete_instance(InstanceArn=event['PhysicalResourceId'])
                  #     cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  print("done")
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  IDCInstance:
    Type: AWS::CloudFormation::CustomResource
    Condition: IfCreateIDC
    Properties:
      ServiceToken: !GetAtt IDCLambda.Arn

  QBusinessWebExperienceServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
               - application.qbusiness.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
              - 'sts:SetContext'              
            Condition:
              StringEquals: 
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
              ArnLike: 
                "aws:SourceArn": !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}"
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref QBusinessWebExperienceServiceManagedPolicy
    DependsOn:
      - QBusinessWebExperienceServiceManagedPolicy         
      
  QBusinessWebExperienceServiceManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:      
      Description: Q Web Experience Managed Policy
      Path: /service-role/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "QBusinessConversationPermission"
            Effect: Allow
            Action: 
            - "s3:GetObject"
            - "qbusiness:Chat"
            - "qbusiness:ChatSync"
            - "qbusiness:ListMessages"
            - "qbusiness:ListConversations"
            - "qbusiness:DeleteConversation"
            - "qbusiness:PutFeedback"
            - "qbusiness:GetWebExperience"
            - "qbusiness:GetApplication"
            - "qbusiness:ListPlugins"
            - "qbusiness:GetChatControlsConfiguration"              
            Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}"
          - Sid: "QBusinessKMSDecryptPermissions"
            Effect: Allow
            Action: "kms:Decrypt"
            Resource: !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/key_id"
            Condition:
              StringEquals:
                "kms:ViaService": !Sub "qbusiness:${AWS::Region}:amazonaws.com"
          - Sid: "QBusinessQAppsPermissions"
            Effect: Allow
            Action: 
            -  "qapps:CreateQApp"
            -  "qapps:PredictProblemStatementFromConversation"
            -  "qapps:PredictQAppFromProblemStatement"
            -  "qapps:CopyQApp"
            -  "qapps:GetQApp"
            -  "qapps:ListQApps"
            -  "qapps:UpdateQApp"
            -  "qapps:DeleteQApp"
            -  "qapps:AssociateQAppWithUser"
            -  "qapps:DisassociateQAppFromUser"
            -  "qapps:ImportDocumentToQApp"
            -  "qapps:ImportDocumentToQAppSession"
            -  "qapps:CreateLibraryItem"
            -  "qapps:GetLibraryItem"
            -  "qapps:UpdateLibraryItem"
            -  "qapps:CreateLibraryItemReview"
            -  "qapps:ListLibraryItems"
            -  "qapps:CreateSubscriptionToken"
            -  "qapps:StartQAppSession"
            -  "qapps:StopQAppSession"
            Resource: !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}"
                 

  QBusinessDataSourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
               - qbusiness.amazonaws.com
            Action: 
              - 'sts:AssumeRole'
            Condition:
              StringEquals: 
                "aws:SourceAccount": !Sub "${AWS::AccountId}"
              ArnLike: 
                "aws:SourceArn": !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}"
      Path: /service-role/
      ManagedPolicyArns:
        - !Ref QBusinessDataSourceManagedPolicy
    DependsOn:
      - QBusinessDataSourceManagedPolicy      

  QBusinessDataSourceManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:      
      Description: Q DataSource Managed Policy
      Path: /service-role/
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowsAmazonQToGetObjectfromS3"
            Effect: Allow
            Action: "s3:GetObject"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${S3DataSourceBucket}/*"
            Condition:
              StringEquals:
                "aws:ResourceAccount": !Sub "${AWS::AccountId}"
          - Sid: "AllowsAmazonQToListS3Buckets"
            Effect: Allow
            Action: "s3:ListBucket"
            Resource: !Sub "arn:${AWS::Partition}:s3:::${S3DataSourceBucket}"
            Condition:
              StringEquals:
                "aws:ResourceAccount": !Sub "${AWS::AccountId}"
          - Sid: "AllowsAmazonQToIngestDocuments"
            Effect: Allow
            Action: 
            - "qbusiness:BatchPutDocument"
            - "qbusiness:BatchDeleteDocument" 
            Resource:
            - !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}/index/${QBusinessIndex.IndexId}"
          - Sid: "AllowsAmazonQToCallMappingAPIs"
            Effect: Allow
            Action:
            - "qbusiness:PutGroup"
            - "qbusiness:CreateUser"
            - "qbusiness:DeleteGroup"
            - "qbusiness:UpdateUser"
            - "qbusiness:ListGroups"
            Resource:
            - !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}"
            - !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}/index/${QBusinessIndex.IndexId}"
            - !Sub "arn:${AWS::Partition}:qbusiness:${AWS::Region}:${AWS::AccountId}:application/${QBusinessApp.ApplicationId}/index/${QBusinessIndex.IndexId}/data-source/*"
                 
  QBusinessApp:
    Type: AWS::QBusiness::Application
    Properties:
      DisplayName: !Ref QBusinessApplicationName
      Description: Q Support Insights (QSI)
      IdentityCenterInstanceArn: !GetAtt IDCInstance.InstanceArn
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/qbusiness.amazonaws.com/AWSServiceRoleForQBusiness


  QBusinessIndex:
    Type: AWS::QBusiness::Index
    Properties:
     ApplicationId: !GetAtt  QBusinessApp.ApplicationId
     DisplayName: qci-insights-index

  QBusinessRetriver:
    Type: AWS::QBusiness::Retriever
    Properties:
     ApplicationId: !GetAtt  QBusinessApp.ApplicationId
     Configuration:
      NativeIndexConfiguration:
        IndexId: !GetAtt QBusinessIndex.IndexId
     DisplayName: qci-insights-index
     Type: NATIVE_INDEX


  QBusinessWebExperience:
    Type: AWS::QBusiness::WebExperience
    Properties:
     ApplicationId: !GetAtt  QBusinessApp.ApplicationId
     RoleArn: !GetAtt QBusinessWebExperienceServiceRole.Arn  
     Title: Q Support Insights 

  
  QBusinessDataSource:
    Type: AWS::QBusiness::DataSource
    Properties:
     ApplicationId: !GetAtt QBusinessApp.ApplicationId
     Configuration:
        type: "S3"
        version: "1.0.0"
        syncMode: "FORCED_FULL_CRAWL"
        additionalProperties:
          inclusionPrefixes:
            - ""
        connectionConfiguration:
          repositoryEndpointMetadata:
            BucketName: !Ref S3DataSourceBucket
        repositoryConfigurations:
          document:
            fieldMappings:
              - dataSourceFieldName: "s3_document_id"
                indexFieldName: "s3_document_id"
                indexFieldType: "STRING"      
     DisplayName: qci-insights-datasource
     SyncSchedule: 'cron(0 0 * * ? *)'
     IndexId: !GetAtt QBusinessIndex.IndexId
     RoleArn: !GetAtt QBusinessDataSourceRole.Arn
  
